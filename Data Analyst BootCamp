
Table 1 Query:
Create Table EmployeeDemographics 
(EmployeeID int, 
FirstName varchar(50), 
LastName varchar(50), 
Age int, 
Gender varchar(50)
)

Table 2 Query:
Create Table EmployeeSalary 
(EmployeeID int, 
JobTitle varchar(50), 
Salary int
)



Table 1 Insert:
Insert into EmployeeDemographics VALUES
(1001, 'Jim', 'Halpert', 30, 'Male'),
(1002, 'Pam', 'Beasley', 30, 'Female'),
(1003, 'Dwight', 'Schrute', 29, 'Male'),
(1004, 'Angela', 'Martin', 31, 'Female'),
(1005, 'Toby', 'Flenderson', 32, 'Male'),
(1006, 'Michael', 'Scott', 35, 'Male'),
(1007, 'Meredith', 'Palmer', 32, 'Female'),
(1008, 'Stanley', 'Hudson', 38, 'Male'),
(1009, 'Kevin', 'Malone', 31, 'Male')

Table 2 Insert:
Insert Into EmployeeSalary VALUES
(1001, 'Salesman', 45000),
(1002, 'Receptionist', 36000),
(1003, 'Salesman', 63000),
(1004, 'Accountant', 47000),
(1005, 'HR', 50000),
(1006, 'Regional Manager', 65000),
(1007, 'Supplier Relations', 41000),
(1008, 'Salesman', 48000),
(1009, 'Accountant', 42000)

SELECT JobTitle, AVG(Salary)
FROM [SQL Tutorial].dbo.EmployeeDemographics
INNER JOIN [SQL Tutorial].dbo.EmployeeSalary
	ON EmployeeDemographics.EmployeeID = EmployeeSalary.EmployeeID
WHERE JobTitle='Salesman'
GROUP BY JobTitle

SELECT FirstName, LastName, Age,
CASE
	WHEN Age > 30 THEN 'Old'
	WHEN Age BETWEEN 27 AND 30 THEN 'Young'
	ELSE 'Baby'
END
FROM [SQL Tutorial].dbo.EmployeeDemographics
WHERE Age is NOT NULL
ORDER BY Age

SELECT FirstName, LastName, Age,
CASE
	WHEN Age = 38 THEN 'Stanley'
	WHEN Age > 30 THEN 'Old'
	ELSE 'Baby'
END
FROM [SQL Tutorial].dbo.EmployeeDemographics
WHERE Age is NOT NULL
ORDER BY Age

SELECT FirstName, LastName, JobTitle, Salary,
CASE
	WHEN JobTitle= 'Salesman' THEN Salary + (Salary * 0.10)
	WHEN JobTitle = 'Accountant' THEN Salary + (Salary * 0.05)
	WHEN JobTitle = 'HR' THEN Salary + (Salary * 0.000001)
	ELSE Salary + (Salary * 0.03)
END AS SalaryAfterRaise
FROM [SQL Tutorial].dbo.EmployeeDemographics
JOIN [SQL Tutorial].dbo.EmployeeSalary
	ON EmployeeDemographics.EmployeeID = EmployeeSalary.EmployeeID

SELECT JobTitle, AVG(Salary)
FROM [SQL Tutorial].dbo.EmployeeDemographics
JOIN [SQL Tutorial].dbo.EmployeeSalary
	ON EmployeeDemographics.EmployeeID=EmployeeSalary.EmployeeID
GROUP BY JobTitle
HAVING AVG(Salary)>45000
ORDER BY AVG(Salary) DESC

SELECT *
FROM [SQL Tutorial].dbo.EmployeeDemographics

UPDATE [SQL Tutorial].dbo.EmployeeDemographics
SET Age=31, Gender='Female'
WHERE FirstName='Holly' AND LastName='Flax'


DELETE FROM [SQL Tutorial].dbo.EmployeeDemographics
WHERE EmployeeID=1005

DELETE FROM [SQL Tutorial].dbo.EmployeeDemographics
WHERE EmployeeID=1005

SELECT AVG(Age) AS AvgAge
FROM
[SQL Tutorial].dbo.EmployeeDemographics

SELECT Demo.EmployeeID, Sal.Salary
FROM
[SQL Tutorial].dbo.EmployeeDemographics AS Demo
JOIN [SQL Tutorial].dbo.EmployeeSalary AS Sal
	ON Demo.EmployeeID=Sal.EmployeeID 
	
SELECT Demo.EmployeeID, Demo.FirstName, Demo.LastName, Sal.JobTitle, Ware.Age
FROM [SQL Tutorial].dbo.EmployeeDemographics AS Demo
LEFT JOIN [SQL Tutorial].dbo.EmployeeSalary AS Sal
	ON Demo.EmployeeID=Sal.EmployeeID
LEFT JOIN [SQL Tutorial].dbo.WareHouseEmployeeDemographics AS Ware
	ON Demo.EmployeeID=Ware.EmployeeID 
	
	
	PARTITION BY
SELECT * 
FROM [SQL Tutorial]..EmployeeDemographics AS Demo
JOIN [SQL Tutorial]..EmployeeSalary AS Sal
	ON Demo.EmployeeID=Sal.EmployeeID

SELECT *
FROM [SQL Tutorial]..EmployeeDemographics
WHERE EmployeeID=1005

INSERT INTO [SQL Tutorial]..EmployeeDemographics VALUES
(1005, 'Toby', 'Flenderson', 32, 'Male')

	Difference Between Group By and Partition

SELECT Gender, COUNT(Gender) 
FROM [SQL Tutorial]..EmployeeDemographics AS Dem
JOIN [SQL Tutorial]..EmployeeSalary AS Sal
	ON Dem.EmployeeID=Sal.EmployeeID
GROUP BY Gender

SELECT FirstName, LastName, Gender, Salary,
COUNT(Gender) OVER (PARTITION BY Gender) AS TotalGender
FROM [SQL Tutorial]..EmployeeDemographics AS Dem
JOIN [SQL Tutorial]..EmployeeSalary AS Sal
	ON Dem.EmployeeID=Sal.EmployeeID
	
	CTE Tables
WITH CTE_Employee AS
(SELECT FirstName, LastName, Gender, Salary
,COUNT(Gender) OVER (PARTITION BY Gender) AS TotalGender
,AVG(Salary) OVER (PARTITION BY Gender) AS AvgSalary
FROM [SQL Tutorial]..EmployeeDemographics AS Dem
JOIN [SQL Tutorial]..EmployeeSalary AS Sal
	ON Dem.EmployeeID=Sal.EmployeeID
WHERE Salary>'45000'
)
SELECT *
FROM CTE_Employee


	TEMP TABLES
	
CREATE TABLE #temp_Employee(
EmployeeID int,
JobTitle varchar(100),
Salary int
)

SELECT *
FROM #temp_Employee
INSERT INTO #temp_Employee VALUES (
'1001', 'HR', '45000'
)
INSERT INTO #temp_Employee
SELECT *
FROM [SQL Tutorial]..EmployeeSalary


CREATE TABLE #Temp_Employee2(
JobTitle varchar(50),
EmployeePerJob int,
AvgAge int,
AvgSalary int
)

INSERT INTO #Temp_Employee2
SELECT JobTitle, Count(JobTitle), AVG(Age), AVG(Salary)
FROM [SQL Tutorial]..EmployeeDemographics AS Emp
JOIN [SQL Tutorial]..EmployeeSalary AS Sal
	ON Emp.EmployeeID=Sal.EmployeeID
GROUP BY JobTitle

SELECT *
FROM #Temp_Employee2

CREATE PROCEDURE TEST
AS
SELECT *
FROM EmployeeDemographics

EXEC TEST;

CREATE PROCEDURE Temp_Employee
AS 
CREATE TABLE #Temp_Employee (
JobTitle varchar(100),
EmployeesPerJob int,
AvgAge int,
AvgSalary int
)

INSERT INTO #Temp_Employee
SELECT JobTitle, Count(JobTitle), AVG(Age), AVG(Salary)
FROM EmployeeDemographics AS Emp
	JOIN EmployeeSalary AS Sal
	ON Emp.EmployeeID=Sal.EmployeeID
GROUP BY JobTitle

SELECT *
FROM #Temp_Employee

EXEC Temp_Employee

-- SUBQUERIES

SELECT *
FROM EmployeeSalary

--Subquery in Select
SELECT EmployeeID, Salary, (Select AVG(Salary)FROM EmployeeSalary)AS AllAvgSalary 
FROM EmployeeSalary

--How to do it with Partition By
SELECT EmployeeID, Salary, AVG(Salary) OVER () AS AllAvgSalary 
FROM EmployeeSalary

-- Why Group By doesn't work
SELECT EmployeeID, Salary, AVG(Salary) AS AllAvgSalary 
FROM EmployeeSalary
GROUP BY EmployeeID, Salary
ORDER BY 1,2

--SUBQUERY IN FROM
SELECT A.EmployeeID, AllAvgSalary
FROM (SELECT EmployeeID, Salary, AVG(Salary) OVER () AS AllAvgSalary 
FROM EmployeeSalary) AS A

--SUBQUERY in WHERE
SELECT EmployeeID, JobTitle, Salary
FROM EmployeeSalary
WHERE EmployeeID IN (
		SELECT EmployeeID
		FROM EmployeeDemographics
		WHERE Age>30)
					
