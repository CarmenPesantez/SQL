			freeCodeCamp Full Project

**** To create tables and add foreign keys ****

CREATE TABLE employee (
  emp_id INT PRIMARY KEY,
  first_name VARCHAR(40),
  last_name VARCHAR(40),
  birth_day DATE,
  sex VARCHAR(1),
  salary INT,
  super_id INT,
  branch_id INT
);

CREATE TABLE branch (
  branch_id INT PRIMARY KEY,
  branch_name VARCHAR(40),
  mgr_id INT,
  mgr_start_date DATE,
  FOREIGN KEY(mgr_id) REFERENCES employee(emp_id) ON DELETE SET NULL
);

ALTER TABLE employee
ADD FOREIGN KEY(branch_id)
REFERENCES branch(branch_id)
ON DELETE SET NULL;

ALTER TABLE employee
ADD FOREIGN KEY(super_id)
REFERENCES employee(emp_id)
ON DELETE SET NULL;

CREATE TABLE client (
  client_id INT PRIMARY KEY,
  client_name VARCHAR(40),
  branch_id INT,
  FOREIGN KEY(branch_id) REFERENCES branch(branch_id) ON DELETE SET NULL
);

CREATE TABLE works_with (
  emp_id INT,
  client_id INT,
  total_sales INT,
  PRIMARY KEY(emp_id, client_id),
  FOREIGN KEY(emp_id) REFERENCES employee(emp_id) ON DELETE CASCADE,
  FOREIGN KEY(client_id) REFERENCES client(client_id) ON DELETE CASCADE
);

CREATE TABLE branch_supplier (
  branch_id INT,
  supplier_name VARCHAR(40),
  supply_type VARCHAR(40),
  PRIMARY KEY(branch_id, supplier_name),
  FOREIGN KEY(branch_id) REFERENCES branch(branch_id) ON DELETE CASCADE
);

*****INSERTING VALUES*****

--Corporate Branch ****

INSERT INTO employee VALUES(100, 'David', 'Wallace', '1967-11-17', 'M', 250000, NULL, NULL);

INSERT INTO branch VALUES(1, 'Corporate', 100, '2006-02-09');

UPDATE employee
SET branch_id = 1
WHERE emp_id = 100;

INSERT INTO employee VALUES(101, 'Jan', 'Levinson', '1961-05-11', 'F', 110000, 100, 1);

--Scranton Branch ****

INSERT INTO employee VALUES(102, 'Michael', 'Scott', '1964-03-15', 'M', 75000, 100, NULL);

INSERT INTO branch VALUES(2, 'Scranton', 102, '1992-04-06');

UPDATE employee
SET branch_id = 2
WHERE emp_id = 102;

INSERT INTO employee VALUES(103, 'Angela', 'Martin', '1971-06-25', 'F', 63000, 102, 2);
INSERT INTO employee VALUES(104, 'Kelly', 'Kapoor', '1980-02-05', 'F', 55000, 102, 2);
INSERT INTO employee VALUES(105, 'Stanley', 'Hudson', '1958-02-19', 'M', 69000, 102, 2);

-- Stamford Branch ****

INSERT INTO employee VALUES(106, 'Josh', 'Porter', '1969-09-05', 'M', 78000, 100, NULL);

INSERT INTO branch VALUES(3, 'Stamford', 106, '1998-02-13');

UPDATE employee
SET branch_id = 3
WHERE emp_id = 106;

INSERT INTO employee VALUES(107, 'Andy', 'Bernard', '1973-07-22', 'M', 65000, 106, 3);
INSERT INTO employee VALUES(108, 'Jim', 'Halpert', '1978-10-01', 'M', 71000, 106, 3);

-- BRANCH SUPPLIER *****

INSERT INTO branch_supplier VALUES(2, 'Hammer Mill', 'Paper');
INSERT INTO branch_supplier VALUES(2, 'Uni-ball', 'Writing Utensils');
INSERT INTO branch_supplier VALUES(3, 'Patriot Paper', 'Paper');
INSERT INTO branch_supplier VALUES(2, 'J.T. Forms & Labels', 'Custom Forms');
INSERT INTO branch_supplier VALUES(3, 'Uni-ball', 'Writing Utensils');
INSERT INTO branch_supplier VALUES(3, 'Hammer Mill', 'Paper');
INSERT INTO branch_supplier VALUES(3, 'Stamford Lables', 'Custom Forms');

--CLIENT***

INSERT INTO client VALUES(400, 'Dunmore Highschool', 2);
INSERT INTO client VALUES(401, 'Lackawana Country', 2);
INSERT INTO client VALUES(402, 'FedEx', 3);
INSERT INTO client VALUES(403, 'John Daly Law, LLC', 3);
INSERT INTO client VALUES(404, 'Scranton Whitepages', 2);
INSERT INTO client VALUES(405, 'Times Newspaper', 3);
INSERT INTO client VALUES(406, 'FedEx', 2);

-- WORKS_WITH***

INSERT INTO works_with VALUES(105, 400, 55000);
INSERT INTO works_with VALUES(102, 401, 267000);
INSERT INTO works_with VALUES(108, 402, 22500);
INSERT INTO works_with VALUES(107, 403, 5000);
INSERT INTO works_with VALUES(108, 403, 12000);
INSERT INTO works_with VALUES(105, 404, 33000);
INSERT INTO works_with VALUES(107, 405, 26000);
INSERT INTO works_with VALUES(102, 406, 15000);
INSERT INTO works_with VALUES(105, 406, 130000);

*** WORKING WITH TABLES ***

---SELECT

* DESCRIBE employee (It gives me all columns, data type, constrains and defults)

SELECT * FROM employee;

SELECT * FROM client;

SELECT * FROM employee
ORDER BY salary;

SELECT * FROM employee
ORDER BY salary DESC;

SELECT * FROM employee
ORDER BY sex, first_name, last_name;

SELECT * 
FROM employee
LIMIT 5;

SELECT first_name AS forename, last_name AS surname
FROM employee;

SELECT DISTINCT sex
FROM employee;

SELECT DISTINCT branch_id
FROM employee;

--- FUNCTIONS

SELECT COUNT(*)
FROM employee;

SELECT COUNT(emp_id)
FROM employee;

SELECT COUNT (super_id)
FROM employee;

--Find the number of female employees born after 1970***
SELECT COUNT (*) FROM employee
WHERE sex='F' AND birth_day > '1971-01-01';

--Find the average salary***
SELECT AVG (salary)
FROM employee;

-- Find the average salary from male employees***
SELECT AVG (salary)
FROM employee
WHERE sex = "M";

-- Find the sum of all employees salary, total payroll***
 SELECT SUM (salary)
 FROM employee;
 
--- AGGREGATION

-- Find the number of employees separated by sex, how many "M" and how many "F"
SELECT COUNT (sex), sex
FROM employee
GROUP BY sex;

-- Find the total sales of each salesman
SELECT emp_id, SUM (total_sales) 
FROM works_with
GROUP by emp_id;

-- Find how much money each client spent with the company
SELECT client_id, SUM (total_sales)
FROM works_with
GROUP BY client_id;

--- WILDCARDS

*** We can use special caracters to define a patern,"%", "_". The % means any number of characters that could be before or after our required information
and the _ means a single character before or after required data.

-- Find any clients that are an LLC
SELECT *
FROM client
WHERE client_name LIKE '%LLC%';

-- Find any employee born in October
SELECT *
FROM employee
WHERE birth_day LIKE ('____-10-%');

*** Born on March***
FROM employee
WHERE birth_day LIKE ('____-03-%');

-- Find any clients who are schools
SELECT *
FROM client
WHERE client_name LIKE ('%school%');

--- UNION 
*** Operator used to combine results of multiple select statements and combine them in only one result,
some rules applied, has to be the same number of columns, same type of data.

SELECT first_name
FROM employee
UNION
SELECT branch_name 
FROM branch;

SELECT first_name AS Company_names
FROM employee
UNION
SELECT branch_name 
FROM branch
UNION
SELECT client_name
FROM client;

--Find a list of all clients & branch suppliers names
SELECT client_name 
FROM client
UNION
SELECT supplier_name
FROM branch_supplier;

-- Find a list of all the money spent or earned by the company -salary and total_sales
SELECT salary
FROM employee
UNION
SELECT total_sales
FROM works_with;

--- JOINS

Inserting new branch in the table branch

INSERT INTO branch VALUES (4, 'Buffalo', NULL, NULL);

-- Find all branches and the names of their managers

SELECT employee.emp_id, employee.first_name, branch.branch_name
FROM employee
INNER JOIN branch
ON employee.emp_id=branch.mgr_id;

**LEFT JOIN includes all data from left table, the left table is the
first table announce on the statement***

SELECT employee.emp_id, employee.first_name, branch.branch_name
FROM employee /*Left table*/
LEFT JOIN branch /*Right table*/
ON employee.emp_id=branch.mgr_id;

**RIGHT JOIN includes all data from right table, the right table is the
last table announce on the statement**

SELECT employee.emp_id, employee.first_name, branch.branch_name
FROM employee
RIGHT JOIN branch
ON employee.emp_id=branch.mgr_id

--- NESTED QUERY

-- Find names of all employees who have sold over 30,000 to a single client
SELECT employee.first_name, employee.last_name
FROM employee
WHERE employee.emp_id IN (
/*NESTED QUERY*/
SELECT works_with.emp_id 
FROM works_with
WHERE works_with.total_sales>30000);

 **** OTHER WAY TO SOLVE IT

SELECT employee.first_name, employee.last_name, works_with.total_sales
FROM employee
INNER JOIN works_with
ON employee.emp_id=works_with.emp_id
WHERE works_with.total_sales>30000;

-- Find all clients who are handled by the branch that Michael Scott manages
-- Assume ou know Michael's ID
SELECT client.client_name
FROM client
WHERE client.branch_id IN (
SELECT branch.branch_id
FROM branch
WHERE mgr_id=102)

-- Find all clients who are handled by the branch that Michael Scott manages
-- Assume ou know Michael's ID
SELECT client.client_name
FROM client
WHERE client.branch_id = (
SELECT branch.branch_id
FROM branch
WHERE mgr_id=102
LIMIT 1)

--- DELETE

ON DELETE SET NULL
If we delete a row the information will be set to NULL

ON DELETE CASCADE
If you delete a row, the entire row on the database will be deleted entirely,
and not set to null, use for primary keys that can be foreing key in another 
table

--- TRIGGER
Can be use to add phases when adding data to a table, this phrases will 
shown up after each new addition to the table;
example "added new employee" or "Kevin" or "added female"


CREATE TABLE trigger_test(
    message VARCHAR(100)
);

DELIMITER $$
CREATE
    TRIGGER my_trigger BEFORE INSERT
    ON employee
    FOR EACH ROW BEGIN
        INSERT INTO trigger_test VALUES('added new employee');
    END$$
DELIMITER ;

INSERT INTO employee 
VALUES (109, "Oscar", 'Martinez', '1968-02-19', 'M', 69000, 106, 3);

SELECT * FROM trigger_test;

DELIMITER $$
CREATE
    TRIGGER my_trigger1 BEFORE INSERT
    ON employee
    FOR EACH ROW BEGIN
        INSERT INTO trigger_test VALUES(NEW.first_name);
    END$$
DELIMITER ;
INSERT INTO employee
VALUES(110, 'Kevin', 'Malone', '1978-02-19', 'M', 69000, 106, 3);

INSERT INTO employee 
VALUES (110, "Kevin", 'Malone', '1968-02-19', 'M', 69000, 106, 3);

DELIMITER $$
CREATE
    TRIGGER my_trigger2 BEFORE INSERT
    ON employee
    FOR EACH ROW BEGIN
         IF NEW.sex = 'M' THEN
               INSERT INTO trigger_test VALUES('added male employee');
         ELSEIF NEW.sex = 'F' THEN
               INSERT INTO trigger_test VALUES('added female');
         ELSE
               INSERT INTO trigger_test VALUES('added other employee');
         END IF;
    END$$
DELIMITER ;

INSERT INTO employee
VALUES(111, 'Pam', 'Beesly', '1988-02-19', 'F', 69000, 106, 3);

--- ER = Entity Relationship
We need to definy a database schema, that is all the different tables and
the attributes that will be store on those tables. By using a ER diagram we can use
to map up a database schema.




