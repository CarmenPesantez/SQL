SELECT name, population, area FROM World
WHERE area>=3000000 OR population>=25000000

SELECT class FROM Courses
GROUP BY class
HAVING COUNT(student)>=5

SELECT E.name AS Employee FROM Employee AS E
INNER JOIN Employee AS M
ON E.managerId=M.id
WHERE E.salary>M.salary

SELECT email
FROM Person
GROUP BY email
HAVING COUNT(email)>1

/*Write an SQL query to report the names of the customer that are not referred by the customer with id = 2*/
SELECT name FROM Customer
WHERE id NOT IN (SELECT id FROM Customer
                 WHERE referee_id=2)
                 
SELECT name FROM Customer
WHERE referee_id <>2 OR referee_id IS NULL
(Since NULL values are ignore we can include an expression to include this values IS NULL)

/*Write an SQL query to report all customers who never order anything.*/

SELECT name AS Customers FROM Customers
WHERE id NOT IN (SELECT customerId FROM Orders)

/*Write an SQL query to calculate the bonus of each employee. The bonus of an employee is 100% of their salary if 
the ID of the employee is an odd number and the employee name does not start with the character 'M'. The bonus of an employee is 0 otherwise.*/

SELECT employee_id, (if(employee_id%2<>0 AND name NOT LIKE 'M%', salary, 0)) AS bonus
FROM Employees
Order by employee_id;

/*Write an SQL query to swap all 'f' and 'm' values (i.e., change all 'f' values to 'm' and vice versa) with a single 
update statement and no intermediate temporary tables.*/

UPDATE Salary
SET
sex=CASE
sex
WHEN 'm' THEN 'f'
WHEN 'f' THEN 'm'
END;

UPDATE Salary
SET sex=CASE
WHEN sex='m' THEN 'f'
WHEN sex='f' THEN 'm'
END;

***Write an SQL query to delete all the duplicate emails, keeping only one unique email with the smallest id.
Note that you are supposed to write a DELETE statement and not a SELECT one.

DELETE p1 FROM Person p1,
Person p2
WHERE p1.email=p2.email AND p1.id>p2.id;

***Write an SQL query to fix the names so that only the first character is uppercase and the rest are lowercase.
Return the result table ordered by user_id.

SELECT user_id,
CONCAT(UPPER(LEFT(name, 1)), LOWER(RIGHT(name, LENGTH(name)-1))) as name
FROM Users
ORDER BY user_id

***Write an SQL query to find for each date the number of different products sold and their names.

The sold products names for each date should be sorted lexicographically.
Return the result table ordered by sell_date.

SELECT sell_date, COUNT(DISTINCT product) AS num_sold, 
GROUP_CONCAT(DISTINCT product ORDER BY product ASC) AS products
FROM Activities
GROUP BY sell_date
ORDER BY sell_date;
